name: Celestia

on:
  push:
    branches: [ 1.6.x ]
    paths: [ src/**, .github/workflows/ci.yml, celestia.sln, celestia.vcxproj, celestia.iss ]
  pull_request:
    branches: [ 1.6.x ]
    paths: [ src/**, .github/workflows/ci.yml, celestia.sln, celestia.vcxproj, celestia.iss ]

env:
  VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'

jobs:
  build-windows:
    name: "Build and package Windows"
    runs-on: windows-latest
    strategy:
      fail-fast: false

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install dependencies
      shell: pwsh
      run: |
        $vcpkgCommit = 'cff6ed45719c0162fa7065fdac90506a0add812c'
        pushd $env:VCPKG_INSTALLATION_ROOT

        git fetch origin $vcpkgCommit
        git reset --hard $vcpkgCommit
        ./bootstrap-vcpkg.bat
        ./vcpkg.exe integrate install
        
        $nugetCmd = vcpkg fetch nuget | Select-Object -Last 1
        $nugetSource = 'https://nuget.pkg.github.com/CelestiaProject/index.json'
        & "$nugetCmd" sources add `
          -Source "$nugetSource" `
          -StorePasswordInClearText `
          -Name "GitHub" `
          -Username 'CelestiaProject' `
          -Password '${{secrets.GITHUB_TOKEN}}'
        & "$nugetCmd" setapikey '${{secrets.GITHUB_TOKEN}}' `
          -Source "$nugetSource"
        
        ./vcpkg.exe --triplet=x64-windows --host-triplet=x64-windows `
          install --recurse libpng libjpeg-turbo gettext[tools] luajit cspice
        
        if ($LastExitCode -ne 0) {
          throw "Failed to install x64-windows dependencies"
        }

        ./vcpkg.exe --triplet=x86-windows --host-triplet=x86-windows `
          install --recurse libpng libjpeg-turbo gettext luajit cspice

        if ($LastExitCode -ne 0) {
          throw "Failed to install x86-windows dependencies"
        }

        popd

    - name: Build Win32
      shell: pwsh
      run: |
        $installationPath = vswhere.exe -prerelease -latest -property installationPath
        if ($installationPath -and (Test-Path "$installationPath\Common7\Tools\vsdevcmd.bat")) {
          & "${env:COMSPEC}" /s /c "`"$installationPath\Common7\Tools\vsdevcmd.bat`" -no_logo -arch=x86 -host_arch=amd64 && set" | ForEach-Object {
            $name, $value = $_ -split '=', 2
            Set-Content env:\"$name" $value
          }
        }
        msbuild celestia.sln /p:Configuration=Release /p:Platform=Win32
        if ($LastExitCode -ne 0) {
          throw "Failed to build Win32"
        }
        $env:PATH += ";${env:VCPKG_INSTALLATION_ROOT}/installed/x64-windows/tools/gettext/bin"
        perl po/translate_resources.pl Win32

    - name: Build x64
      shell: pwsh
      run: |
        $installationPath = vswhere.exe -prerelease -latest -property installationPath
        if ($installationPath -and (Test-Path "$installationPath\Common7\Tools\vsdevcmd.bat")) {
          & "${env:COMSPEC}" /s /c "`"$installationPath\Common7\Tools\vsdevcmd.bat`" -no_logo -arch=amd64 -host_arch=amd64 && set" | ForEach-Object {
            $name, $value = $_ -split '=', 2
            Set-Content env:\"$name" $value
          }
        }
        $VcpkgIncludeDir64 = "$env:VCPKG_INSTALLATION_ROOT/installed/x64-windows/include"
        msbuild celestia.sln /p:Configuration=Release /p:Platform=x64
        if ($LastExitCode -ne 0) {
          throw "Failed to build x64"
        }
        $env:PATH += ";;${env:VCPKG_INSTALLATION_ROOT}/installed/x64-windows/tools/gettext/bin"
        perl po/translate_resources.pl x64

    - name: Create installer
      shell: pwsh
      run: ISCC celestia.iss

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: celestia-windows-installer
        path: |
          ${{github.workspace}}/Output/**.exe
