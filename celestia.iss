;
; Celestia Windows exe Build script, generated by the Inno Setup Script Wizard.

; This script was tested with Inno Setup Compiler version 5.1.5

#ifdef BuildX64Installer
  #define Arch "x64"
  #define ArchitecturesInstallIn64BitModeValue "x64"
#else
  #define Arch "x86"
  #define ArchitecturesInstallIn64BitModeValue ""
#endif

[Setup]
AppName=Celestia
AppVerName=Celestia 1.7.0
AppPublisher=Shatters Software
AppPublisherURL=https://celestia.space/
AppSupportURL=https://celestia.space/
AppUpdatesURL=https://celestia.space/
DefaultDirName={code:DefDirRoot}\Celestia
DefaultGroupName=Celestia
LicenseFile=COPYING
Compression=lzma2/Ultra
InternalCompressLevel=Ultra
SolidCompression=true
UninstallDisplayIcon={app}\celestia.exe
WizardImageFile=win32-installer-image.bmp
PrivilegesRequired=none
; Tell Explorer to refresh its file associations information at the
; end of the installation, and Uninstall will do the same at the end
; of uninstallation.
ChangesAssociations=true
; uncomment the following line if you want your installation to run on NT 3.51 too.
; MinVersion=4,3.51
ArchitecturesInstallIn64BitMode={#ArchitecturesInstallIn64BitModeValue}

[Tasks]
Name: "desktopicon"; Description: "Create a &desktop icon";            GroupDescription: "Additional icons:"; MinVersion: 4,4
Name: "urlassoc";    Description: "Associate cel:// &URLs";            GroupDescription: "Other tasks:"
Name: "fileassoc";   Description: "Associate .cel and .celx &scripts"; GroupDescription: "Other tasks:"

[Dirs]
Name: "{app}\extras"
Name: "{app}\data"
Name: "{app}\textures"
Name: "{app}\scripts"
Name: "{app}\images"
Name: "{app}\extras-standard"
Name: "{app}\locale"
Name: "{app}\warp"
Name: "{app}\help"

[Files]
Source: "celestia-win.exe"; DestDir: "{app}"; DestName: "celestia.exe"; Flags: ignoreversion
Source: "celestia-qt.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "start.cel";    DestDir: "{app}"; Flags: ignoreversion
Source: "celestia.cfg"; DestDir: "{app}"; Flags: ignoreversion
Source: "demo.cel";     DestDir: "{app}"; Flags: ignoreversion
Source: "guide.cel";    DestDir: "{app}"; Flags: ignoreversion
Source: "*.dll";        DestDir: "{app}"; Flags: ignoreversion
Source: "controls.txt"; DestDir: "{app}"; Flags: ignoreversion
Source: "COPYING";      DestDir: "{app}"; Flags: ignoreversion
Source: "README";       DestDir: "{app}"; Flags: ignoreversion isreadme;   DestName: "README.txt"
Source: "AUTHORS";      DestDir: "{app}"; Flags: ignoreversion;            DestName: "AUTHORS.txt"
Source: "TRANSLATORS";  DestDir: "{app}"; Flags: ignoreversion;            DestName: "TRANSLATORS.txt"
Source: "ChangeLog";    DestDir: "{app}"; Flags: ignoreversion;            DestName: "ChangeLog.txt"
Source: "splash\splash.png";   DestDir: "{app}/splash"; Flags: ignoreversion

Source: "vc_redist.exe"; DestDir: {tmp}

; Languages
Source: "locale\*";          DestDir: "{app}/locale"; Flags: ignoreversion recursesubdirs

; Data
Source: "data\*";            DestDir: "{app}/data"; Flags: ignoreversion recursesubdirs

; Textures
Source: "textures\*";        DestDir: "{app}/textures"; Flags: ignoreversion recursesubdirs

; Shaders
Source: "shaders\*";         DestDir: "{app}/shaders"; Flags: ignoreversion recursesubdirs

; Models
Source: "models\*";          DestDir: "{app}/models"; Flags: ignoreversion recursesubdirs

; Fonts
Source: "fonts\*";           DestDir: "{app}/fonts"; Flags: ignoreversion recursesubdirs

; Standard extras
Source: "extras-standard\*"; DestDir: "{app}/extras-standard"; Flags: ignoreversion recursesubdirs

; Scripts
Source: "scripts\*";         DestDir: "{app}/scripts"; Flags: ignoreversion recursesubdirs

; Images
Source: "images\*";          DestDir: "{app}/images"; Flags: ignoreversion recursesubdirs

; Warp
Source: "warp\*";            DestDir: "{app}/warp"; Flags: ignoreversion recursesubdirs

; Help
Source: "help\*";            DestDir: "{app}/help"; Flags: ignoreversion recursesubdirs

[InstallDelete]
Type: files; Name: "{app}\extras\minormoons.ssc";
Type: files; Name: "{app}\extras\numberedmoons.ssc";

[INI]
Filename: "{app}\celestia.url"; Section: "InternetShortcut"; Key: "URL"; String: "https://celestia.space/"

[Icons]
Name: "{group}\Celestia";            Filename: "{app}\celestia.exe"; WorkingDir: "{app}"
Name: "{group}\Celestia (QT)";       Filename: "{app}\celestia-qt.exe"; WorkingDir: "{app}"
Name: "{group}\README";              Filename: "{app}\README.txt"
Name: "{group}\Celestia on the Web"; Filename: "{app}\celestia.url"
Name: "{userdesktop}\Celestia";      Filename: "{app}\celestia.exe"; WorkingDir: "{app}"; MinVersion: 4,4; Tasks: desktopicon
Name: "{userdesktop}\Celestia (QT)"; Filename: "{app}\celestia-qt.exe"; WorkingDir: "{app}"; MinVersion: 4,4; Tasks: desktopicon

[Registry]
; The Software\Shatters.net key is created by the Celestia program, so it needs
; to be deleted during an uninstall.
Root: HKCU; Subkey: "Software\Shatters.net"; Flags: uninsdeletekey

; If installing as admin, write associations to HKCR

Root: HKCR; Subkey: "cel"; Flags: uninsdeletekeyifempty; Check: not IsRegularUser
Root: HKCR; Subkey: "cel"; ValueType: string; ValueData: "URL:cel Protocol"; Tasks: urlassoc; Flags: uninsdeletevalue; Check: not IsRegularUser
Root: HKCR; Subkey: "cel"; ValueName: "URL Protocol"; ValueType: string; Tasks: urlassoc; Flags: uninsdeletevalue; Check: not IsRegularUser

Root: HKCR; Subkey: "cel\Shell"; ValueType: string; Tasks: urlassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: not IsRegularUser
Root: HKCR; Subkey: "cel\Shell\open"; ValueType: string; Tasks: urlassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: not IsRegularUser
Root: HKCR; Subkey: "cel\Shell\open\Command"; ValueType: string; ValueData: """{app}\celestia.exe"" --once --dir ""{app}"" -u ""%1"""; Tasks: urlassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: not IsRegularUser

Root: HKCR; Subkey: ".cel";  ValueType: string; ValueData: "celestia_script"; Tasks: fileassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: not IsRegularUser
Root: HKCR; Subkey: ".clx";  ValueType: string; ValueData: "celestia_script"; Tasks: fileassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: not IsRegularUser
Root: HKCR; Subkey: ".celx"; ValueType: string; ValueData: "celestia_script"; Tasks: fileassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: not IsRegularUser

Root: HKCR; Subkey: "celestia_script"; ValueName: "URL Protocol"; ValueType: string; Tasks: fileassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: not IsRegularUser
Root: HKCR; Subkey: "celestia_script\Shell"; ValueType: string; Tasks: fileassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: not IsRegularUser
Root: HKCR; Subkey: "celestia_script\Shell\open"; ValueType: string; Tasks: fileassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: not IsRegularUser
Root: HKCR; Subkey: "celestia_script\Shell\open\Command"; ValueType: string; ValueData: """{app}\celestia.exe"" --once --dir ""{app}"" -u ""%1"""; Tasks: fileassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: not IsRegularUser

; If installing as regular user, write to HKCU

Root: HKCU; Subkey: "Software\Classes\cel"; Flags: uninsdeletekeyifempty; Check: IsRegularUser
Root: HKCU; Subkey: "Software\Classes\cel"; ValueType: string; ValueData: "URL:cel Protocol"; Tasks: urlassoc; Flags: uninsdeletevalue; Check: IsRegularUser
Root: HKCU; Subkey: "Software\Classes\cel"; ValueName: "URL Protocol"; ValueType: string; Tasks: urlassoc; Flags: uninsdeletevalue; Check: IsRegularUser

Root: HKCU; Subkey: "Software\Classes\cel\Shell"; ValueType: string; Tasks: urlassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: IsRegularUser
Root: HKCU; Subkey: "Software\Classes\cel\Shell\open"; ValueType: string; Tasks: urlassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: IsRegularUser
Root: HKCU; Subkey: "Software\Classes\cel\Shell\open\Command"; ValueType: string; ValueData: """{app}\celestia.exe"" --once --dir ""{app}"" -u ""%1"""; Tasks: urlassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: IsRegularUser

Root: HKCU; Subkey: "Software\Classes\.cel";  ValueType: string; ValueData: "celestia_script"; Tasks: fileassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: IsRegularUser
Root: HKCU; Subkey: "Software\Classes\.clx";  ValueType: string; ValueData: "celestia_script"; Tasks: fileassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: IsRegularUser
Root: HKCU; Subkey: "Software\Classes\.celx"; ValueType: string; ValueData: "celestia_script"; Tasks: fileassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: IsRegularUser

Root: HKCU; Subkey: "Software\Classes\celestia_script"; ValueName: "URL Protocol"; ValueType: string; Tasks: fileassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: IsRegularUser
Root: HKCU; Subkey: "Software\Classes\celestia_script\Shell"; ValueType: string; Tasks: fileassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: IsRegularUser
Root: HKCU; Subkey: "Software\Classes\celestia_script\Shell\open"; ValueType: string; Tasks: fileassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: IsRegularUser
Root: HKCU; Subkey: "Software\Classes\celestia_script\Shell\open\Command"; ValueType: string; ValueData: """{app}\celestia.exe"" --once --dir ""{app}"" -u ""%1"""; Tasks: fileassoc; Flags: uninsdeletevalue uninsdeletekeyifempty; Check: IsRegularUser

[Run]
Filename: "{tmp}\vc_redist.exe"; StatusMsg: "Installing VC++ redistributables..."; Parameters: "/q /norestart"; Check: VCRedistNeedsInstall ; Flags: waituntilterminated

Filename: "{app}\celestia.exe"; Description: "Launch Celestia"; Flags: nowait postinstall skipifsilent

[UninstallDelete]
Type: files; Name: "{app}\celestia.url"

[code]
function IsRegularUser(): Boolean;
begin
  Result := not (IsAdmin or IsPowerUserLoggedOn);
end;

function DefDirRoot(Param: String): String;
begin
  if IsRegularUser then
    Result := ExpandConstant('{localappdata}')
  else
    Result := ExpandConstant('{pf}')
end;

function VCRedistNeedsInstall: Boolean;
var
  Version: String;
begin
  if RegQueryStringValue(HKEY_LOCAL_MACHINE,
       'SOFTWARE\Microsoft\VisualStudio\14.0\VC\Runtimes\' + '{#Arch}', 'Version', Version) then
  begin
    // Is the installed version at least 14.34 ?
    Log('VC Redist Version check : found ' + Version);
    Result := (CompareStr(Version, 'v14.34.31931.00')<0);
  end
  else
  begin
    // Not even an old version installed
    Result := True;
  end;
end;
